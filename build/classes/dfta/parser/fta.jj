PARSER_BEGIN(FTAParser)

package dfta.parser;

import java.util.LinkedHashSet;

public class FTAParser {
public static LinkedHashSet transitions = new LinkedHashSet();
public static LinkedHashSet finalStates = new LinkedHashSet();
}


PARSER_END(FTAParser)

// Tokens

SKIP :
{ " " | "\t" | "\n" | "\r" }

TOKEN : 
{ 
  <FINAL : "Final" > |
  <STATES : "States" > |
  <TRANSITIONS : "Transitions" > |
  <AUTOMATON : "Automaton" > |
  <OPS : "Ops" > |
  <LBRACE : "(" > |
  <RBRACE : ")" > |
  <LSQBRACE : "[" > |
  <RSQBRACE : "]" > |
  <VERTBAR : "|" > |
  <UNDERSCORE : "_" > |
  <COMMA : "," > |
  <COLON : ":" > |
  <FULLSTOP : "." > |
  <ARROW : "->" > |
  <QUOTE : "'" > |
  <BINOP :  "/" | "*" | ";"  | ":-"  | "^" | "=" > |
  <ANYOP : "+" | "-" > 
  
}

TOKEN :
{
  < NUMBER: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
  |
  < DECIMALNUMBER: <NUMBER> <FULLSTOP> <NUMBER>  >
}


TOKEN : 
{
  
< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
|
  < #LETTER:
      (["A"-"Z"] | ["a"-"z"] )
  >
|
  < #DIGIT:
      ["0"-"9"]    
  >
}




TOKEN : 
{
< QIDENT: <QUOTE> (<NONQUOTE>)* (<QUOTE> <QUOTE> (<NONQUOTE>)* )* <QUOTE> >  |
  <#NONQUOTE : ~["'","\n", "\r"] >
}



SPECIAL_TOKEN : 
{
  <SINGLE_LINE_COMMENT: "%" ([" "-"~"] )* ("\n" | "\r" | "\r\n") > |
  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


// Timbuk syntax rules for FTA transitions
/************************************
  
  <file>            : 'Ops' <label_list> <automaton>

  <label_list>      : <label_decl> <label_decl> ... // a list of label declarations

  <label_decl>      : string ':' int // a symbol declaration (the name and the arity)

  <automaton>       : 'Automaton' string 'States' <state_list> 'Final States' <state_list> 'Transitions' <transition_list>

  <state_list>      : <state> <state> ... // a list of states

  <state>           : string // the name of a state

  <transition_list> : <transition> <transition> ... // a list of transitions

  <transition>      : <label> '(' <state> ',' <state> ',' ... ')' '->' <state> // a transition

  <label>           : string // the name of a label
  
************************************/

// Parse FTA in either Timbuk syntax or Prolog syntax
void FTA() :
{ }
{ (	TimbukFTA() |
 	PrologFTA() )
}

/********* Timbuk *********/

void TimbukFTA() :
{ }
{ OpsDecls() Automaton() States() FinalStates() TimbukTransitions() <EOF>
}

void OpsDecls() :
{ }
{ <OPS> LabelList() 
}

void LabelList() :
{ }
{ (LabelDecl())* 
}

void LabelDecl() :
{ }
{ 
 <IDENTIFIER> <COLON> <NUMBER>
}

void Automaton() :
{ }
{ <AUTOMATON> <IDENTIFIER> 
}


void States() :
{ }
{ <STATES> StateList() 
}

void StateList() :
{ }
{ (Ident() (<COLON> <NUMBER>)?)* 
}

void FinalStates() :
{ }
{ <FINAL> <STATES> // Collect the final states in the LinkedHashSet finalStates
 Ident() {finalStates.add(((NodeToken)n4.f0.choice).tokenImage);}
 ( Ident() {finalStates.add(((NodeToken)n6.f0.choice).tokenImage);}
 )*  
}

void TimbukTransitions() :
{ }
{ <TRANSITIONS> TimbukTransitionList() 
}

void TimbukTransitionList() :
{ }
{(Transition() 
 {transitions.add(n1);}  // Collect the transitions in the LinkedHashSet transitions
 )* 
}


/********* end Timbuk *********/

/********* Prolog *********/

void PrologFTA() :
{ }
{ (PrologFinalStates())? (<TRANSITIONS> <FULLSTOP>)? PrologTransitions() <EOF>
}

void PrologFinalStates() :
{ }
{ <FINAL> <STATES> // Collect the final states in the HashSet finalStates
 Ident() {finalStates.add(((NodeToken)n4.f0.choice).tokenImage);}
 ( Ident() {finalStates.add(((NodeToken)n6.f0.choice).tokenImage);}
 )*  <FULLSTOP>
}

void PrologTransitions() :
{ }
{(Transition() <FULLSTOP>
 {transitions.add(n2);}  // Collect the transitions in the HashSet transitions
 )* 
}


/********* end Prolog *********/

/********* Common non-terminals *********/

void Transition() :
{}
{
  LHS() RHS() 
}

void RHS() :
{ }
{
  Ident()
}

void LHS() :
{ }
{ 
  Ident() (
		   <LBRACE> (Ident() (<COMMA> Ident())*)? <RBRACE> <ARROW>  | 
           <ARROW> |
           <BINOP> Ident() <ARROW> |
           <ANYOP> Ident() <ARROW> |
           <COMMA> Ident() <ARROW> ) 
 |
  <NUMBER> <ARROW> 
 |
  <ANYOP> (<NUMBER> | Ident()) <ARROW> 
 |
  <LSQBRACE> (Ident() <VERTBAR> Ident() <RSQBRACE> <ARROW> | 
              <RSQBRACE> <ARROW>)  
 |
  <LBRACE> Ident() ( <COMMA> | <BINOP> ) Ident() <RBRACE> <ARROW> 
}


void Ident() :
{ }
{ 
 <IDENTIFIER> | <QIDENT>
}
