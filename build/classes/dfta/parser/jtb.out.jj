//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(FTAParser)
package dfta.parser;

import java.util.HashSet;
import dfta.parser.syntaxtree.*;
import java.util.Vector;


public class FTAParser 
{
   public static HashSet transitions = new HashSet();
   public static HashSet finalStates = new HashSet();
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(FTAParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
}

TOKEN :
{
   <FINAL: "Final">
   | <STATES: "States">
   | <TRANSITIONS: "Transitions">
   | <LBRACE: "(">
   | <RBRACE: ")">
   | <LSQBRACE: "[">
   | <RSQBRACE: "]">
   | <VERTBAR: "|">
   | <UNDERSCORE: "_">
   | <COMMA: ",">
   | <FULLSTOP: ".">
   | <ARROW: "->">
   | <QUOTE: "'">
   | <BINOP: "/" | "*" | ";" | ":-" | "^" | "=">
   | <ANYOP: "+" | "-">
}

TOKEN :
{
   <NUMBER: (["1"-"9"] (["0"-"9"])* | "0")>
   | <DECIMALNUMBER: <NUMBER> <FULLSTOP> <NUMBER>>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | <UNDERSCORE>)*>
   | <#LETTER: (["A"-"Z"] | ["a"-"z"] | "_")>
   | <#DIGIT: ["0"-"9"]>
}

TOKEN :
{
   <QIDENT: <QUOTE> (<NONQUOTE>)* (<QUOTE> <QUOTE> (<NONQUOTE>)*)* <QUOTE>>
   | <#NONQUOTE: ~["'", "\n", "\r"]>
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "%" ([" "-"~"])* ("\n" | "\r" | "\r\n")>
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

FTA FTA() :
{
   NodeOptional n0 = new NodeOptional();
   FinalStates n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Delta n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n1=FinalStates()
      { n0.addNode(n1); }
   )?
   (
      { n3 = new NodeSequence(2); }
      n5=<TRANSITIONS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<FULLSTOP> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   n8=Delta()
   n10=<EOF> { 
      n10.beginColumn++; n10.endColumn++;
      n9 = JTBToolkit.makeNodeToken(n10);
   }
   
   { return new FTA(n0,n2,n8,n9); }
}

FinalStates FinalStates() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Ident n4;
   NodeListOptional n5 = new NodeListOptional();
   Ident n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<FINAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<STATES> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Ident()
   
   {
      finalStates.add(((NodeToken)n4.f0.choice).tokenImage);
   }
   
   (
      n6=Ident()
      
      {
         finalStates.add(((NodeToken)n6.f0.choice).tokenImage);
      }
      
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8=<FULLSTOP> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new FinalStates(n0,n2,n4,n5,n7); }
}

Delta Delta() :
{
   NodeListOptional n0 = new NodeListOptional();
   Transition n1;

   
}
{
   (
      n1=Transition()
      
      {
         transitions.add(n1);
      }
      
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new Delta(n0); }
}

Transition Transition() :
{
   LHS n0;
   RHS n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=LHS()
   n1=RHS()
   n3=<FULLSTOP> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new Transition(n0,n1,n2); }
}

LHS LHS() :
{
   NodeChoice n0;
   NodeSequence n1;
   Ident n2;
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Ident n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Ident n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   Ident n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   Ident n28;
   NodeToken n29;
   Token n30;
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   Ident n34;
   NodeToken n35;
   Token n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   NodeChoice n45;
   NodeToken n46;
   Token n47;
   Ident n48;
   NodeToken n49;
   Token n50;
   NodeSequence n51;
   NodeToken n52;
   Token n53;
   NodeChoice n54;
   NodeSequence n55;
   Ident n56;
   NodeToken n57;
   Token n58;
   Ident n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeSequence n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeSequence n69;
   NodeToken n70;
   Token n71;
   Ident n72;
   NodeChoice n73;
   NodeToken n74;
   Token n75;
   NodeToken n76;
   Token n77;
   Ident n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Ident()
      { n1.addNode(n2); }
      (
         (
            { n4 = new NodeSequence(5); }
            n6=<LBRACE> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
            n7=Ident()
            { n4.addNode(n7); }
            (
               { n9 = new NodeSequence(2); }
               n11=<COMMA> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9.addNode(n10); }
               n12=Ident()
               { n9.addNode(n12); }
               { n8.addNode(n9); }
            )*
            { n8.nodes.trimToSize(); }
            { n4.addNode(n8); }
            n14=<RBRACE> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n4.addNode(n13); }
            n16=<ARROW> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n4.addNode(n15); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n18=<ARROW> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n3 = new NodeChoice(n17, 1); }
         |
            { n19 = new NodeSequence(3); }
            n21=<BINOP> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
            n22=Ident()
            { n19.addNode(n22); }
            n24=<ARROW> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n19.addNode(n23); }
            { n3 = new NodeChoice(n19, 2); }
         |
            { n25 = new NodeSequence(3); }
            n27=<ANYOP> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
            n28=Ident()
            { n25.addNode(n28); }
            n30=<ARROW> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n25.addNode(n29); }
            { n3 = new NodeChoice(n25, 3); }
         |
            { n31 = new NodeSequence(3); }
            n33=<COMMA> { n32 = JTBToolkit.makeNodeToken(n33); }
            { n31.addNode(n32); }
            n34=Ident()
            { n31.addNode(n34); }
            n36=<ARROW> { n35 = JTBToolkit.makeNodeToken(n36); }
            { n31.addNode(n35); }
            { n3 = new NodeChoice(n31, 4); }
         )
         
      )
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n37 = new NodeSequence(2); }
      n39=<NUMBER> { n38 = JTBToolkit.makeNodeToken(n39); }
      { n37.addNode(n38); }
      n41=<ARROW> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n37.addNode(n40); }
      { n0 = new NodeChoice(n37, 1); }
   |
      { n42 = new NodeSequence(3); }
      n44=<ANYOP> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n42.addNode(n43); }
      (
         (
            n47=<NUMBER> { n46 = JTBToolkit.makeNodeToken(n47); }
            { n45 = new NodeChoice(n46, 0); }
         |
            n48=Ident()
            { n45 = new NodeChoice(n48, 1); }
         )
         
      )
      { n42.addNode(n45); }
      n50=<ARROW> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n42.addNode(n49); }
      { n0 = new NodeChoice(n42, 2); }
   |
      { n51 = new NodeSequence(2); }
      n53=<LSQBRACE> { n52 = JTBToolkit.makeNodeToken(n53); }
      { n51.addNode(n52); }
      (
         (
            { n55 = new NodeSequence(5); }
            n56=Ident()
            { n55.addNode(n56); }
            n58=<VERTBAR> { n57 = JTBToolkit.makeNodeToken(n58); }
            { n55.addNode(n57); }
            n59=Ident()
            { n55.addNode(n59); }
            n61=<RSQBRACE> { n60 = JTBToolkit.makeNodeToken(n61); }
            { n55.addNode(n60); }
            n63=<ARROW> { n62 = JTBToolkit.makeNodeToken(n63); }
            { n55.addNode(n62); }
            { n54 = new NodeChoice(n55, 0); }
         |
            { n64 = new NodeSequence(2); }
            n66=<RSQBRACE> { n65 = JTBToolkit.makeNodeToken(n66); }
            { n64.addNode(n65); }
            n68=<ARROW> { n67 = JTBToolkit.makeNodeToken(n68); }
            { n64.addNode(n67); }
            { n54 = new NodeChoice(n64, 1); }
         )
         
      )
      { n51.addNode(n54); }
      { n0 = new NodeChoice(n51, 3); }
   |
      { n69 = new NodeSequence(6); }
      n71=<LBRACE> { n70 = JTBToolkit.makeNodeToken(n71); }
      { n69.addNode(n70); }
      n72=Ident()
      { n69.addNode(n72); }
      (
         (
            n75=<COMMA> { n74 = JTBToolkit.makeNodeToken(n75); }
            { n73 = new NodeChoice(n74, 0); }
         |
            n77=<BINOP> { n76 = JTBToolkit.makeNodeToken(n77); }
            { n73 = new NodeChoice(n76, 1); }
         )
         
      )
      { n69.addNode(n73); }
      n78=Ident()
      { n69.addNode(n78); }
      n80=<RBRACE> { n79 = JTBToolkit.makeNodeToken(n80); }
      { n69.addNode(n79); }
      n82=<ARROW> { n81 = JTBToolkit.makeNodeToken(n82); }
      { n69.addNode(n81); }
      { n0 = new NodeChoice(n69, 4); }
   )
   
   { return new LHS(n0); }
}

RHS RHS() :
{
   Ident n0;

   
}
{
   n0=Ident()
   
   { return new RHS(n0); }
}

Ident Ident() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<QIDENT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new Ident(n0); }
}
