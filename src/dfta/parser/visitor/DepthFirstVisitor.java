//
// Generated by JTB 1.3.2
//

package dfta.parser.visitor;
import dfta.parser.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( TimbukFTA() | PrologFTA() )
    */
   public void visit(FTA n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> OpsDecls()
    * f1 -> Automaton()
    * f2 -> States()
    * f3 -> FinalStates()
    * f4 -> TimbukTransitions()
    * f5 -> <EOF>
    */
   public void visit(TimbukFTA n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> <OPS>
    * f1 -> LabelList()
    */
   public void visit(OpsDecls n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ( LabelDecl() )*
    */
   public void visit(LabelList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> <COLON>
    * f2 -> <NUMBER>
    */
   public void visit(LabelDecl n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> <AUTOMATON>
    * f1 -> <IDENTIFIER>
    */
   public void visit(Automaton n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <STATES>
    * f1 -> StateList()
    */
   public void visit(States n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ( Ident() ( <COLON> <NUMBER> )? )*
    */
   public void visit(StateList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <FINAL>
    * f1 -> <STATES>
    * f2 -> Ident()
    * f3 -> ( Ident() )*
    */
   public void visit(FinalStates n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <TRANSITIONS>
    * f1 -> TimbukTransitionList()
    */
   public void visit(TimbukTransitions n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ( Transition() )*
    */
   public void visit(TimbukTransitionList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ( PrologFinalStates() )?
    * f1 -> ( <TRANSITIONS> <FULLSTOP> )?
    * f2 -> PrologTransitions()
    * f3 -> <EOF>
    */
   public void visit(PrologFTA n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <FINAL>
    * f1 -> <STATES>
    * f2 -> Ident()
    * f3 -> ( Ident() )*
    * f4 -> <FULLSTOP>
    */
   public void visit(PrologFinalStates n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> ( Transition() <FULLSTOP> )*
    */
   public void visit(PrologTransitions n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> LHS()
    * f1 -> RHS()
    */
   public void visit(Transition n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Ident()
    */
   public void visit(RHS n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Ident() ( <LBRACE> ( Ident() ( <COMMA> Ident() )* )? <RBRACE> <ARROW> | <ARROW> | <BINOP> Ident() <ARROW> | <ANYOP> Ident() <ARROW> | <COMMA> Ident() <ARROW> )
    *       | <NUMBER> <ARROW>
    *       | <ANYOP> ( <NUMBER> | Ident() ) <ARROW>
    *       | <LSQBRACE> ( Ident() <VERTBAR> Ident() <RSQBRACE> <ARROW> | <RSQBRACE> <ARROW> )
    *       | <LBRACE> Ident() ( <COMMA> | <BINOP> ) Ident() <RBRACE> <ARROW>
    */
   public void visit(LHS n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    *       | <QIDENT>
    */
   public void visit(Ident n) {
      n.f0.accept(this);
   }

}
