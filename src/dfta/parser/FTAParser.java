/* Generated By:JavaCC: Do not edit this line. FTAParser.java */
package dfta.parser;

import java.util.LinkedHashSet;
import dfta.parser.syntaxtree.*;
import java.util.Vector;


public class FTAParser implements FTAParserConstants {
   public static LinkedHashSet transitions = new LinkedHashSet();
   public static LinkedHashSet finalStates = new LinkedHashSet();

  static final public FTA FTA() throws ParseException {
   NodeChoice n0;
   TimbukFTA n1;
   PrologFTA n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPS:
      n1 = TimbukFTA();
           n0 = new NodeChoice(n1, 0);
      break;
    case 0:
    case FINAL:
    case TRANSITIONS:
    case LBRACE:
    case LSQBRACE:
    case ANYOP:
    case NUMBER:
    case IDENTIFIER:
    case QIDENT:
      n2 = PrologFTA();
           n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new FTA(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TimbukFTA TimbukFTA() throws ParseException {
   OpsDecls n0;
   Automaton n1;
   States n2;
   FinalStates n3;
   TimbukTransitions n4;
   NodeToken n5;
   Token n6;
    n0 = OpsDecls();
    n1 = Automaton();
    n2 = States();
    n3 = FinalStates();
    n4 = TimbukTransitions();
    n6 = jj_consume_token(0);
      n6.beginColumn++; n6.endColumn++;
      n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new TimbukFTA(n0,n1,n2,n3,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public OpsDecls OpsDecls() throws ParseException {
   NodeToken n0;
   Token n1;
   LabelList n2;
    n1 = jj_consume_token(OPS);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = LabelList();
     {if (true) return new OpsDecls(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public LabelList LabelList() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   LabelDecl n1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n1 = LabelDecl();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new LabelList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LabelDecl LabelDecl() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
                n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NUMBER);
                 n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new LabelDecl(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Automaton Automaton() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(AUTOMATON);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Automaton(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public States States() throws ParseException {
   NodeToken n0;
   Token n1;
   StateList n2;
    n1 = jj_consume_token(STATES);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StateList();
     {if (true) return new States(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public StateList StateList() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Ident n1;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case QIDENT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n1 = Ident();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new StateList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalStates FinalStates() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Ident n4;
   NodeListOptional n5 = new NodeListOptional();
   Ident n6;
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STATES);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Ident();
      finalStates.add(((NodeToken)n4.f0.choice).tokenImage);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case QIDENT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      n6 = Ident();
         finalStates.add(((NodeToken)n6.f0.choice).tokenImage);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
     {if (true) return new FinalStates(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public TimbukTransitions TimbukTransitions() throws ParseException {
   NodeToken n0;
   Token n1;
   TimbukTransitionList n2;
    n1 = jj_consume_token(TRANSITIONS);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TimbukTransitionList();
     {if (true) return new TimbukTransitions(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public TimbukTransitionList TimbukTransitionList() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Transition n1;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case LSQBRACE:
      case ANYOP:
      case NUMBER:
      case IDENTIFIER:
      case QIDENT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      n1 = Transition();
         transitions.add(n1);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new TimbukTransitionList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PrologFTA PrologFTA() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   PrologFinalStates n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   PrologTransitions n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n1 = PrologFinalStates();
        n0.addNode(n1);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSITIONS:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(TRANSITIONS);
                         n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(FULLSTOP);
                      n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    n8 = PrologTransitions();
    n10 = jj_consume_token(0);
      n10.beginColumn++; n10.endColumn++;
      n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new PrologFTA(n0,n2,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public PrologFinalStates PrologFinalStates() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Ident n4;
   NodeListOptional n5 = new NodeListOptional();
   Ident n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STATES);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Ident();
      finalStates.add(((NodeToken)n4.f0.choice).tokenImage);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case QIDENT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      n6 = Ident();
         finalStates.add(((NodeToken)n6.f0.choice).tokenImage);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(FULLSTOP);
                   n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrologFinalStates(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public PrologTransitions PrologTransitions() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   Transition n2;
   NodeToken n3;
   Token n4;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case LSQBRACE:
      case ANYOP:
      case NUMBER:
      case IDENTIFIER:
      case QIDENT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
        n1 = new NodeSequence(3);
      n2 = Transition();
        n1.addNode(n2);
      n4 = jj_consume_token(FULLSTOP);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
         transitions.add(n2);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new PrologTransitions(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Transition Transition() throws ParseException {
   LHS n0;
   RHS n1;
    n0 = LHS();
    n1 = RHS();
     {if (true) return new Transition(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public RHS RHS() throws ParseException {
   Ident n0;
    n0 = Ident();
     {if (true) return new RHS(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LHS LHS() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Ident n2;
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   Ident n9;
   NodeListOptional n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   Ident n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   Ident n24;
   NodeToken n25;
   Token n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   Ident n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Ident n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeSequence n44;
   NodeToken n45;
   Token n46;
   NodeChoice n47;
   NodeToken n48;
   Token n49;
   Ident n50;
   NodeToken n51;
   Token n52;
   NodeSequence n53;
   NodeToken n54;
   Token n55;
   NodeChoice n56;
   NodeSequence n57;
   Ident n58;
   NodeToken n59;
   Token n60;
   Ident n61;
   NodeToken n62;
   Token n63;
   NodeToken n64;
   Token n65;
   NodeSequence n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeSequence n71;
   NodeToken n72;
   Token n73;
   Ident n74;
   NodeChoice n75;
   NodeToken n76;
   Token n77;
   NodeToken n78;
   Token n79;
   Ident n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case QIDENT:
        n1 = new NodeSequence(2);
      n2 = Ident();
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
              n4 = new NodeSequence(4);
        n6 = jj_consume_token(LBRACE);
                          n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case QIDENT:
                 n10 = new NodeListOptional();
                 n8 = new NodeSequence(2);
          n9 = Ident();
                 n8.addNode(n9);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              break label_7;
            }
                    n11 = new NodeSequence(2);
            n13 = jj_consume_token(COMMA);
                                n12 = JTBToolkit.makeNodeToken(n13);
                    n11.addNode(n12);
            n14 = Ident();
                    n11.addNode(n14);
                    n10.addNode(n11);
          }
                 n10.nodes.trimToSize();
                 n8.addNode(n10);
                 n7.addNode(n8);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
              n4.addNode(n7);
        n16 = jj_consume_token(RBRACE);
                           n15 = JTBToolkit.makeNodeToken(n16);
              n4.addNode(n15);
        n18 = jj_consume_token(ARROW);
                          n17 = JTBToolkit.makeNodeToken(n18);
              n4.addNode(n17);
              n3 = new NodeChoice(n4, 0);
        break;
      case ARROW:
        n20 = jj_consume_token(ARROW);
                          n19 = JTBToolkit.makeNodeToken(n20);
              n3 = new NodeChoice(n19, 1);
        break;
      case BINOP:
              n21 = new NodeSequence(3);
        n23 = jj_consume_token(BINOP);
                          n22 = JTBToolkit.makeNodeToken(n23);
              n21.addNode(n22);
        n24 = Ident();
              n21.addNode(n24);
        n26 = jj_consume_token(ARROW);
                          n25 = JTBToolkit.makeNodeToken(n26);
              n21.addNode(n25);
              n3 = new NodeChoice(n21, 2);
        break;
      case ANYOP:
              n27 = new NodeSequence(3);
        n29 = jj_consume_token(ANYOP);
                          n28 = JTBToolkit.makeNodeToken(n29);
              n27.addNode(n28);
        n30 = Ident();
              n27.addNode(n30);
        n32 = jj_consume_token(ARROW);
                          n31 = JTBToolkit.makeNodeToken(n32);
              n27.addNode(n31);
              n3 = new NodeChoice(n27, 3);
        break;
      case COMMA:
              n33 = new NodeSequence(3);
        n35 = jj_consume_token(COMMA);
                          n34 = JTBToolkit.makeNodeToken(n35);
              n33.addNode(n34);
        n36 = Ident();
              n33.addNode(n36);
        n38 = jj_consume_token(ARROW);
                          n37 = JTBToolkit.makeNodeToken(n38);
              n33.addNode(n37);
              n3 = new NodeChoice(n33, 4);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case NUMBER:
        n39 = new NodeSequence(2);
      n41 = jj_consume_token(NUMBER);
                     n40 = JTBToolkit.makeNodeToken(n41);
        n39.addNode(n40);
      n43 = jj_consume_token(ARROW);
                    n42 = JTBToolkit.makeNodeToken(n43);
        n39.addNode(n42);
        n0 = new NodeChoice(n39, 1);
      break;
    case ANYOP:
        n44 = new NodeSequence(3);
      n46 = jj_consume_token(ANYOP);
                    n45 = JTBToolkit.makeNodeToken(n46);
        n44.addNode(n45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        n49 = jj_consume_token(NUMBER);
                           n48 = JTBToolkit.makeNodeToken(n49);
              n47 = new NodeChoice(n48, 0);
        break;
      case IDENTIFIER:
      case QIDENT:
        n50 = Ident();
              n47 = new NodeChoice(n50, 1);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n44.addNode(n47);
      n52 = jj_consume_token(ARROW);
                    n51 = JTBToolkit.makeNodeToken(n52);
        n44.addNode(n51);
        n0 = new NodeChoice(n44, 2);
      break;
    case LSQBRACE:
        n53 = new NodeSequence(2);
      n55 = jj_consume_token(LSQBRACE);
                       n54 = JTBToolkit.makeNodeToken(n55);
        n53.addNode(n54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case QIDENT:
              n57 = new NodeSequence(5);
        n58 = Ident();
              n57.addNode(n58);
        n60 = jj_consume_token(VERTBAR);
                            n59 = JTBToolkit.makeNodeToken(n60);
              n57.addNode(n59);
        n61 = Ident();
              n57.addNode(n61);
        n63 = jj_consume_token(RSQBRACE);
                             n62 = JTBToolkit.makeNodeToken(n63);
              n57.addNode(n62);
        n65 = jj_consume_token(ARROW);
                          n64 = JTBToolkit.makeNodeToken(n65);
              n57.addNode(n64);
              n56 = new NodeChoice(n57, 0);
        break;
      case RSQBRACE:
              n66 = new NodeSequence(2);
        n68 = jj_consume_token(RSQBRACE);
                             n67 = JTBToolkit.makeNodeToken(n68);
              n66.addNode(n67);
        n70 = jj_consume_token(ARROW);
                          n69 = JTBToolkit.makeNodeToken(n70);
              n66.addNode(n69);
              n56 = new NodeChoice(n66, 1);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n53.addNode(n56);
        n0 = new NodeChoice(n53, 3);
      break;
    case LBRACE:
        n71 = new NodeSequence(6);
      n73 = jj_consume_token(LBRACE);
                     n72 = JTBToolkit.makeNodeToken(n73);
        n71.addNode(n72);
      n74 = Ident();
        n71.addNode(n74);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n77 = jj_consume_token(COMMA);
                          n76 = JTBToolkit.makeNodeToken(n77);
              n75 = new NodeChoice(n76, 0);
        break;
      case BINOP:
        n79 = jj_consume_token(BINOP);
                          n78 = JTBToolkit.makeNodeToken(n79);
              n75 = new NodeChoice(n78, 1);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n71.addNode(n75);
      n80 = Ident();
        n71.addNode(n80);
      n82 = jj_consume_token(RBRACE);
                     n81 = JTBToolkit.makeNodeToken(n82);
        n71.addNode(n81);
      n84 = jj_consume_token(ARROW);
                    n83 = JTBToolkit.makeNodeToken(n84);
        n71.addNode(n83);
        n0 = new NodeChoice(n71, 4);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LHS(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Ident Ident() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case QIDENT:
      n4 = jj_consume_token(QIDENT);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Ident(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public FTAParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x12c016a1,0x2000000,0x12000000,0x12000000,0x12c01400,0x20,0x80,0x12000000,0x12c01400,0x10000,0x12000000,0x690400,0x12800000,0x12002000,0x210000,0x12c01400,0x12000000,};
   }

  public FTAParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public FTAParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FTAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public FTAParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FTAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public FTAParser(FTAParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(FTAParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[32];
    for (int i = 0; i < 32; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
