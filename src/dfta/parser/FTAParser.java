/* Generated By:JavaCC: Do not edit this line. FTAParser.java */
package dfta.parser;

import java.util.LinkedHashSet;
import dfta.parser.syntaxtree.*;
import java.util.Vector;


public class FTAParser implements FTAParserConstants {
   public static LinkedHashSet transitions = new LinkedHashSet();
   public static LinkedHashSet finalStates = new LinkedHashSet();

  static final public FTA FTA() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   FinalStates n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Delta n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n1 = FinalStates();
        n0.addNode(n1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSITIONS:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(TRANSITIONS);
                         n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(FULLSTOP);
                      n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n8 = Delta();
    n10 = jj_consume_token(0);
      n10.beginColumn++; n10.endColumn++;
      n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new FTA(n0,n2,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalStates FinalStates() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Ident n4;
   NodeListOptional n5 = new NodeListOptional();
   Ident n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STATES);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Ident();
      finalStates.add(((NodeToken)n4.f0.choice).tokenImage);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case QIDENT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      n6 = Ident();
         finalStates.add(((NodeToken)n6.f0.choice).tokenImage);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(FULLSTOP);
                   n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new FinalStates(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public Delta Delta() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Transition n1;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case LSQBRACE:
      case ANYOP:
      case NUMBER:
      case IDENTIFIER:
      case QIDENT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      n1 = Transition();
         transitions.add(n1);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new Delta(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Transition Transition() throws ParseException {
   LHS n0;
   RHS n1;
   NodeToken n2;
   Token n3;
    n0 = LHS();
    n1 = RHS();
    n3 = jj_consume_token(FULLSTOP);
                   n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Transition(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public LHS LHS() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Ident n2;
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Ident n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Ident n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   Ident n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   Ident n28;
   NodeToken n29;
   Token n30;
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   Ident n34;
   NodeToken n35;
   Token n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   NodeChoice n45;
   NodeToken n46;
   Token n47;
   Ident n48;
   NodeToken n49;
   Token n50;
   NodeSequence n51;
   NodeToken n52;
   Token n53;
   NodeChoice n54;
   NodeSequence n55;
   Ident n56;
   NodeToken n57;
   Token n58;
   Ident n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeSequence n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeSequence n69;
   NodeToken n70;
   Token n71;
   Ident n72;
   NodeChoice n73;
   NodeToken n74;
   Token n75;
   NodeToken n76;
   Token n77;
   Ident n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case QIDENT:
        n1 = new NodeSequence(2);
      n2 = Ident();
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
              n4 = new NodeSequence(5);
        n6 = jj_consume_token(LBRACE);
                          n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        n7 = Ident();
              n4.addNode(n7);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
                 n9 = new NodeSequence(2);
          n11 = jj_consume_token(COMMA);
                             n10 = JTBToolkit.makeNodeToken(n11);
                 n9.addNode(n10);
          n12 = Ident();
                 n9.addNode(n12);
                 n8.addNode(n9);
        }
              n8.nodes.trimToSize();
              n4.addNode(n8);
        n14 = jj_consume_token(RBRACE);
                           n13 = JTBToolkit.makeNodeToken(n14);
              n4.addNode(n13);
        n16 = jj_consume_token(ARROW);
                          n15 = JTBToolkit.makeNodeToken(n16);
              n4.addNode(n15);
              n3 = new NodeChoice(n4, 0);
        break;
      case ARROW:
        n18 = jj_consume_token(ARROW);
                          n17 = JTBToolkit.makeNodeToken(n18);
              n3 = new NodeChoice(n17, 1);
        break;
      case BINOP:
              n19 = new NodeSequence(3);
        n21 = jj_consume_token(BINOP);
                          n20 = JTBToolkit.makeNodeToken(n21);
              n19.addNode(n20);
        n22 = Ident();
              n19.addNode(n22);
        n24 = jj_consume_token(ARROW);
                          n23 = JTBToolkit.makeNodeToken(n24);
              n19.addNode(n23);
              n3 = new NodeChoice(n19, 2);
        break;
      case ANYOP:
              n25 = new NodeSequence(3);
        n27 = jj_consume_token(ANYOP);
                          n26 = JTBToolkit.makeNodeToken(n27);
              n25.addNode(n26);
        n28 = Ident();
              n25.addNode(n28);
        n30 = jj_consume_token(ARROW);
                          n29 = JTBToolkit.makeNodeToken(n30);
              n25.addNode(n29);
              n3 = new NodeChoice(n25, 3);
        break;
      case COMMA:
              n31 = new NodeSequence(3);
        n33 = jj_consume_token(COMMA);
                          n32 = JTBToolkit.makeNodeToken(n33);
              n31.addNode(n32);
        n34 = Ident();
              n31.addNode(n34);
        n36 = jj_consume_token(ARROW);
                          n35 = JTBToolkit.makeNodeToken(n36);
              n31.addNode(n35);
              n3 = new NodeChoice(n31, 4);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case NUMBER:
        n37 = new NodeSequence(2);
      n39 = jj_consume_token(NUMBER);
                     n38 = JTBToolkit.makeNodeToken(n39);
        n37.addNode(n38);
      n41 = jj_consume_token(ARROW);
                    n40 = JTBToolkit.makeNodeToken(n41);
        n37.addNode(n40);
        n0 = new NodeChoice(n37, 1);
      break;
    case ANYOP:
        n42 = new NodeSequence(3);
      n44 = jj_consume_token(ANYOP);
                    n43 = JTBToolkit.makeNodeToken(n44);
        n42.addNode(n43);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        n47 = jj_consume_token(NUMBER);
                           n46 = JTBToolkit.makeNodeToken(n47);
              n45 = new NodeChoice(n46, 0);
        break;
      case IDENTIFIER:
      case QIDENT:
        n48 = Ident();
              n45 = new NodeChoice(n48, 1);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n42.addNode(n45);
      n50 = jj_consume_token(ARROW);
                    n49 = JTBToolkit.makeNodeToken(n50);
        n42.addNode(n49);
        n0 = new NodeChoice(n42, 2);
      break;
    case LSQBRACE:
        n51 = new NodeSequence(2);
      n53 = jj_consume_token(LSQBRACE);
                       n52 = JTBToolkit.makeNodeToken(n53);
        n51.addNode(n52);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case QIDENT:
              n55 = new NodeSequence(5);
        n56 = Ident();
              n55.addNode(n56);
        n58 = jj_consume_token(VERTBAR);
                            n57 = JTBToolkit.makeNodeToken(n58);
              n55.addNode(n57);
        n59 = Ident();
              n55.addNode(n59);
        n61 = jj_consume_token(RSQBRACE);
                             n60 = JTBToolkit.makeNodeToken(n61);
              n55.addNode(n60);
        n63 = jj_consume_token(ARROW);
                          n62 = JTBToolkit.makeNodeToken(n63);
              n55.addNode(n62);
              n54 = new NodeChoice(n55, 0);
        break;
      case RSQBRACE:
              n64 = new NodeSequence(2);
        n66 = jj_consume_token(RSQBRACE);
                             n65 = JTBToolkit.makeNodeToken(n66);
              n64.addNode(n65);
        n68 = jj_consume_token(ARROW);
                          n67 = JTBToolkit.makeNodeToken(n68);
              n64.addNode(n67);
              n54 = new NodeChoice(n64, 1);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n51.addNode(n54);
        n0 = new NodeChoice(n51, 3);
      break;
    case LBRACE:
        n69 = new NodeSequence(6);
      n71 = jj_consume_token(LBRACE);
                     n70 = JTBToolkit.makeNodeToken(n71);
        n69.addNode(n70);
      n72 = Ident();
        n69.addNode(n72);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n75 = jj_consume_token(COMMA);
                          n74 = JTBToolkit.makeNodeToken(n75);
              n73 = new NodeChoice(n74, 0);
        break;
      case BINOP:
        n77 = jj_consume_token(BINOP);
                          n76 = JTBToolkit.makeNodeToken(n77);
              n73 = new NodeChoice(n76, 1);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n69.addNode(n73);
      n78 = Ident();
        n69.addNode(n78);
      n80 = jj_consume_token(RBRACE);
                     n79 = JTBToolkit.makeNodeToken(n80);
        n69.addNode(n79);
      n82 = jj_consume_token(ARROW);
                    n81 = JTBToolkit.makeNodeToken(n82);
        n69.addNode(n81);
        n0 = new NodeChoice(n69, 4);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LHS(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RHS RHS() throws ParseException {
   Ident n0;
    n0 = Ident();
     {if (true) return new RHS(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Ident Ident() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case QIDENT:
      n4 = jj_consume_token(QIDENT);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Ident(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public FTAParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20,0x80,0x2400000,0x2580500,0x4000,0xd4100,0x2500000,0x2400800,0x44000,0x2580500,0x2400000,};
   }

  public FTAParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public FTAParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FTAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public FTAParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FTAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public FTAParser(FTAParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(FTAParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[29];
    for (int i = 0; i < 29; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
